using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace PathFinder
{
    class Program
    {

        static void Main(string[] args)
        {
            var finder = new PathFinder();
            //finder.Doit(1, 2);
            //finder.Doit2(1, 3);
            //finder.Folyd(1, 2);
            var map = new A2DMap();
            //var path= map.GetAStarPath(new A2DMap.Position(0,0),new A2DMap.Position(10,15));
            
            
            map.PrintMap();
            //var result = map.Q_rsqrt(4);
            //Console.WriteLine(result);
            map.StartGame();
            Console.ReadKey();

        }


    }

    class PathFinder
    {
        const int maxn = 256;
        List<KeyValuePair<int, int>>[] list = new List<KeyValuePair<int, int>>[maxn];

        int[] distance = new int[maxn];
        int[] inq = new int[maxn];
        int[,] matrix = new int[256, 256];

        void init()
        {
            for (int i = 0; i < maxn; i++)
            {
                distance[i] = short.MaxValue;
                inq[i] = 0;

            }
            for (int i = 0; i < maxn; i++)
            {
                for (int j = 0; j < maxn; j++)
                {
                    matrix[i, j] = short.MaxValue;
                }
            }
            matrix[1, 2] = 3;
            matrix[1, 3] = 1;
            matrix[2, 3] = 1;
            matrix[2, 1] = 3;
            matrix[3, 2] = 1;
            matrix[3, 1] = 1;

            list[1] = new List<KeyValuePair<int, int>>() { new KeyValuePair<int, int>(2, 3), new KeyValuePair<int, int>(3, 1) };
            list[2] = new List<KeyValuePair<int, int>>() { new KeyValuePair<int, int>(1, 3), new KeyValuePair<int, int>(3, 1) };
            list[3] = new List<KeyValuePair<int, int>>() { new KeyValuePair<int, int>(1, 1), new KeyValuePair<int, int>(2, 1) };
        }

        Queue<int> Q = new Queue<int>();
        SortedList<int, int> sortedList = new SortedList<int, int>();

        public void Doit2(int start, int target)
        {
            init();
            sortedList.Add(0, start);
            distance[start] = 0;
            while (sortedList.Count > 0)
            {
                int now = sortedList.First().Value;
                sortedList.RemoveAt(0);
                for (int i = 0; i < list[now].Count; i++)
                {
                    if (distance[list[now][i].Key] > distance[now] + list[now][i].Value)
                    {
                        distance[list[now][i].Key] = distance[now] + list[now][i].Value;
                        if (sortedList.Values.Contains(list[now][i].Key))
                            continue;
                        sortedList.Add(distance[list[now][i].Key], list[now][i].Key);
                    }
                }
            }
            Console.WriteLine(distance[target]);
        }

        public void Doit(int start, int target)
        {
            init();

            Q.Enqueue(start);
            inq[start] = 1;
            distance[start] = 0;
            while (Q.Count > 0)
            {
                int now = Q.Peek();
                Q.Dequeue();
                inq[now] = 0;
                for (int i = 0; i < list[now].Count; i++)
                {
                    if (distance[list[now][i].Key] > distance[now] + list[now][i].Value)
                    {
                        distance[list[now][i].Key] = distance[now] + list[now][i].Value;
                        if (inq[list[now][i].Key] == 1)
                            continue;
                        Q.Enqueue(list[now][i].Key);
                        inq[list[now][i].Key] = 1;
                    }
                }
            }
            Console.WriteLine(distance[target]);
        }

        public void Folyd(int start, int target)
        {
            init();
            for (int k = 0; k < 256; k++)
            {
                for (int i = 0; i < 256; i++)
                {
                    for (int j = 0; j < 256; j++)
                    {
                        matrix[i, j] = Math.Min(matrix[i, j], matrix[i, k] + matrix[k, j]);
                    }
                }
            }
            Console.WriteLine(matrix[start, target]);
        }
    }

    class A2DMap
    {
        const int W = 16;
        const int H = 16;

        const int walls = 2;
        const int road = 1;

        Position heroP;
        int[,] map = new int[W, H];
        private bool inputBlock;

        public struct Position
        {
            public Position(int x, int y)
            {
                this.x = x;
                this.y = y;
            }
            public int x, y;
            public static Position operator +(Position left, Position right)
            {
                var newP = new Position();
                newP.x = right.x + left.x;
                newP.y = right.y + left.y;
                return newP;
            }
            public static bool operator ==(Position left, Position right)
            {
                return left.x == right.x && left.y == right.y;
            }
            public static bool operator !=(Position left, Position right)
            {
                return left.x != right.x || left.y != right.y;
            }
        }

        public List<Position> direction = new List<Position>()
        {
            new Position{ x=1,y=0},
            new Position{ x=0,y=1},
            new Position{ x=-1,y=0},
            new Position{ x=0,y=-1},
        };

        public class Node
        {
            public Position position;
            public int G;
            public int H;
            public int Cost
            {
                get
                {
                    return G + H;
                }
            }
            public Node parent;
            public Node(Position p,Node par)
            {
                position = p;
                parent = par;
            }
        }
        

        public A2DMap()
        {
            InitMap();
        }

        private void InitMap()
        {
            for (int i = 0; i < W; i++)
            {
                for (int j = 0; j < H; j++)
                {                    
                    map[i, j] = road;
                }                
            }
            Position LT = new Position(2, 4);
            Position RB = new Position(6, 6);

            
            for (int i = LT.x; i < RB.x; i++)
            {
                for (int j = LT.y; j < RB.y; j++)
                {
                    AddCollider(new Position(i, j));
                }
            }
        }

        public void PrintMap()
        {
            Console.Clear();
            for (int j = 0; j < H;j++)
            {
                for (int i = 0; i < W;i++)
                {
                    if (heroP.x == i && heroP.y == j)
                    {
                        Console.Write(" {0} ", "H");
                        continue;
                    }
                    if(map[i, j] == 1)
                        Console.Write(" {0} ", "*");
                    else if(map[i, j] == 2)
                        Console.Write(" {0} ", "[]");
                }
                Console.WriteLine();
            }            
        }

        public void AddCollider(Position position)
        {
            map[position.x, position.y] = walls;
        }

        public void SetHeroposition(Position position)
        {
            heroP = position;
        }

        public void HandleInput()
        {
            if (inputBlock)
                return;
            var key = Console.ReadKey();

            if (key.Key == ConsoleKey.A)
            {
                var word = Console.ReadLine();
                var words= word.Split(' ').ToList();
                int x = Convert.ToInt32(words.ElementAt(0));
                int y = Convert.ToInt32(words.ElementAt(1));
                var target = new Position(x, y);
                var path = GetAStarPath(heroP, target);
                AutoMove(path);
                return;
            }
            if (key.Key == ConsoleKey.UpArrow)
            {
                HeroMove(new Position(0,-1));
            }
            else if (key.Key == ConsoleKey.DownArrow)
            {
                HeroMove(new Position(0, 1));
            }
            else if (key.Key == ConsoleKey.LeftArrow)
            {
                HeroMove(new Position(-1, 0));
            }
            else if (key.Key == ConsoleKey.RightArrow)
            {
                HeroMove(new Position(1, 0));
            }
        }

        private void HeroMove(Position direction)
        {
            var newP = direction;
            if (newP.x >= W || newP.x < 0 || newP.y >= H || newP.y < 0)
                return;
            if (map[newP.x, newP.y] == walls)
                return;
            heroP = newP;
        }

        class NodeCmp : IComparer<Node>
        {
            public int Compare(Node x, Node y)
            {
                if (x.Cost > y.Cost)
                    return 1;
                else
                    return 0;
            }
        }

        //use A* algorithm to find the path and return it 
        public Position[] GetAStarPath(Position start,Position target)
        {
            List<Position> paths = new List<Position>();
            Queue<Position> queue = new Queue<Position>();

            List<Node> openSet = new List<Node>();
            List<Node> closedSet = new List<Node>();
            
            //queue.Enqueue(start);
            var startNode = new Node(start, null);
            Node now = startNode;
            openSet.Add(startNode);
            openSet.Sort(new NodeCmp());
            while (openSet.Count > 0)
            {
                now = openSet.First();
                openSet.RemoveAt(0);
                closedSet.Add(now);
                if (now.position == target)
                    break;

                for (int i = 0; i < direction.Count; i++)
                {
                    var newPosition = now.position + direction[i];
                    //if the direct position is wall or it is already visited, go to the next position
                    if (!CheckOutOfRange(newPosition) ||IsWall(newPosition) || FindNodeOnList(closedSet, newPosition)!=null)
                        continue;

                    int cost = now.G + 10;
                    var successor = FindNodeOnList(openSet, newPosition);
                    if (successor==null)
                    {
                        successor = new Node(newPosition, now);
                        successor.G = cost;
                        successor.H = CalDistance(successor.position, target);
                        openSet.Add(successor);
                    }
                    else if(cost<successor.G)
                    {
                        successor.parent = now;
                        successor.G = cost;
                    }
                }
            }
            while (now != null)
            {
                paths.Add(now.position);
                now = now.parent;
            }
            return paths.ToArray();
        }

        private bool IsWall(Position p)
        {
            
            return map[p.x, p.y] == walls;
        }
        private bool CheckOutOfRange(Position p)
        {
            return p.x >= 0 && p.x < W && p.y >= 0 && p.y < H;
        }

        private Node FindNodeOnList(IList<Node> list, Position p)
        {
            foreach (var item in list)
            {
                if (item.position == p)
                    return item;
            }
            return null;
        }

        private Node FindNodeOnList(IDictionary<int,Node> list, Position p)
        {
            foreach (var item in list)
            {
                if (item.Value.position == p)
                    return item.Value;
            }
            return null;
        }

        private int CalDistance(Position from,Position to)
        {
            return Math.Abs(from.x - to.x) + Math.Abs(from.y - to.y);
        }

        public void StartGame()
        {
            while (true)
            {
                PrintMap();
                HandleInput();                
                Thread.Sleep(1000/60);
            }
        }

        public float Q_rsqrt(float x)
        {
            //long i;
            //float x2, y;
            //const float threehalfs = 1.5f;
            //x2 = num * 0.5f;
            //y = num;
            //i = (long)y;
            //i = 0x5fe6eb50c7aa19f9 - (i >> 1);
            //y = (float)i;
            //y = y * (threehalfs - (x2 * y * y));
            //y = y * (threehalfs - (x2 * y * y));
            //return y;

            float xhalf = 0.5f * x;
            int i = (int)x;
            i = 0x5f3759df - (i >> 1);
            xhalf = (float)i;
            xhalf = x * (1.5f - xhalf * xhalf * x);
            return xhalf;
        }

        private void BlockHandleInput(bool isBlock)
        {
            inputBlock = isBlock;
        }

        //let hero move automatically
        private void AutoMove(Position[] movement)
        {
            BlockHandleInput(true);
            for (int i = movement.Length-1; i >=0; i--)
            {
                HeroMove(movement[i]);
                PrintMap();
                Thread.Sleep(100);
            }

            BlockHandleInput(false);
        }

    }
}
